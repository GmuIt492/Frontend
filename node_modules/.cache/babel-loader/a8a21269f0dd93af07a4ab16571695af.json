{"ast":null,"code":"// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import withStyles from '@material-ui/core/styles/withStyles';\n// //material ui components\n// import Button from '@material-ui/core/Button';\n// import TextField from '@material-ui/core/TextField';\n// import Dialog from '@material-ui/core/Dialog';\n// import DialogContent from '@material-ui/core/DialogContent';\n// import CircularProgress from '@material-ui/core/CircularProgress';\n// //redux\n// import { connect } from 'react-redux';\n// import { postAction } from '../redux/actions/dataActions';\n// //material ui icons\n// import CloseIcon from '@material-ui/icons/Close';\n// const styles = {\n//     submitButton: {\n//         position: 'relative'\n//     },\n//     progressSpinner: {\n//         position: 'absolute'\n//     },\n//     closeButton: {\n//         position: 'relative',\n//         left: '90%',\n//         top: '10%'\n//     }\n// }\n// class feedback extends Component{\n//     state = {\n//         open:false,\n//         body: '',\n//         errors: {}\n//     };\n//     componentWillReceiveProps(nextProps){\n//         if(nextProps.UI.errors){\n//             this.setState({\n//                 errors: nextProps.UI.errors\n//             });\n//         };\n//         if(!nextProps.UI.errors && !nextProps.UI.loading){\n//             this.setState({ body: '' });\n//             this.handleClose();\n//         }\n//     };\n//     handleOpen = () => {\n//         this.setState({ open: true })\n//     };\n//     handleClose = () => {\n//         this.setState({ open: false, errors:{} })\n//     };\n//     handleChange = (event) => {\n//         this.setState({ [event.target.name]: event.target.value })\n//     }\n//     handleSubmit = (event) => {\n//         event.preventDefault();\n//         this.props.postAction({ body: this.state.body })\n//     }\n//     render(){\n//         const { errors } = this.state;\n//         const {\n//             classes,\n//             UI: { loading }\n//         } = this.props;\n//         return (\n//             <>\n//                 <Button color=\"inherit\" onClick={this.handleOpen} tip='Post'>\n//                     Post\n//                 </Button>\n//                 <Dialog\n//                     open={this.state.open}\n//                     onClose={this.handleClose}\n//                     fullWidth maxWidth=\"sm\"\n//                 >\n//                     <Button\n//                         tip=\"Close\"\n//                         onClick={this.handleClose}\n//                         tipClassName={classes.closeButton}\n//                     >\n//                         <CloseIcon/>\n//                     </Button>\n//                     <h3 class=\"center\">Leave An Opinion Or Anything About Your Experience!</h3>\n//                     <DialogContent>\n//                         <form onSubmit={this.handleSubmit}>\n//                             <TextField\n//                                 name=\"body\"\n//                                 type=\"text\"\n//                                 multiline\n//                                 rows=\"4\"\n//                                 placeholder=\"Hello there\"\n//                                 error={errors.body ? true : false}\n//                                 helperText={errors.body}\n//                                 className={classes.textField}\n//                                 onChange={this.handleChange}\n//                                 fullWidth\n//                             />\n//                             <br/><br/>\n//                             <Button\n//                                 type=\"submit\"\n//                                 variant=\"contained\"\n//                                 color=\"primary\"\n//                                 className={classes.submitButton} disabled={loading}\n//                             >\n//                                 Submit\n//                                 {loading && (\n//                                     <CircularProgress size={30} className={classes.progressSpinner}/>\n//                                 )}\n//                             </Button>\n//                         </form>\n//                     </DialogContent>\n//                 </Dialog>\n//             </>\n//         )\n//     }\n// }\n// feedback.propTypes = {\n//     postAction: PropTypes.func.isRequired,\n//     UI: PropTypes.object.isRequired\n// };\n// const mapStateToProps = (state) => ({\n//     UI: state.UI\n// })\n// export default connect(mapStateToProps,{ postAction })(withStyles(styles)(feedback))","map":{"version":3,"sources":["C:/Users/Michael Tho/Documents/GitHub/Frontend492/src/components/feedback.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n// //material ui components\r\n// import Button from '@material-ui/core/Button';\r\n// import TextField from '@material-ui/core/TextField';\r\n// import Dialog from '@material-ui/core/Dialog';\r\n// import DialogContent from '@material-ui/core/DialogContent';\r\n// import CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// //redux\r\n// import { connect } from 'react-redux';\r\n// import { postAction } from '../redux/actions/dataActions';\r\n\r\n// //material ui icons\r\n// import CloseIcon from '@material-ui/icons/Close';\r\n\r\n// const styles = {\r\n//     submitButton: {\r\n//         position: 'relative'\r\n//     },\r\n//     progressSpinner: {\r\n//         position: 'absolute'\r\n//     },\r\n//     closeButton: {\r\n//         position: 'relative',\r\n//         left: '90%',\r\n//         top: '10%'\r\n//     }\r\n// }\r\n\r\n// class feedback extends Component{\r\n//     state = {\r\n//         open:false,\r\n//         body: '',\r\n//         errors: {}\r\n//     };\r\n//     componentWillReceiveProps(nextProps){\r\n//         if(nextProps.UI.errors){\r\n//             this.setState({\r\n//                 errors: nextProps.UI.errors\r\n//             });\r\n//         };\r\n//         if(!nextProps.UI.errors && !nextProps.UI.loading){\r\n//             this.setState({ body: '' });\r\n//             this.handleClose();\r\n//         }\r\n//     };\r\n//     handleOpen = () => {\r\n//         this.setState({ open: true })\r\n//     };\r\n//     handleClose = () => {\r\n//         this.setState({ open: false, errors:{} })\r\n//     };\r\n//     handleChange = (event) => {\r\n//         this.setState({ [event.target.name]: event.target.value })\r\n//     }\r\n//     handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n//         this.props.postAction({ body: this.state.body })\r\n//     }\r\n//     render(){\r\n//         const { errors } = this.state;\r\n//         const {\r\n//             classes,\r\n//             UI: { loading }\r\n//         } = this.props;\r\n//         return (\r\n//             <>\r\n//                 <Button color=\"inherit\" onClick={this.handleOpen} tip='Post'>\r\n//                     Post\r\n//                 </Button>\r\n//                 <Dialog\r\n//                     open={this.state.open}\r\n//                     onClose={this.handleClose}\r\n//                     fullWidth maxWidth=\"sm\"\r\n//                 >\r\n//                     <Button\r\n//                         tip=\"Close\"\r\n//                         onClick={this.handleClose}\r\n//                         tipClassName={classes.closeButton}\r\n//                     >\r\n//                         <CloseIcon/>\r\n//                     </Button>\r\n//                     <h3 class=\"center\">Leave An Opinion Or Anything About Your Experience!</h3>\r\n//                     <DialogContent>\r\n//                         <form onSubmit={this.handleSubmit}>\r\n//                             <TextField\r\n//                                 name=\"body\"\r\n//                                 type=\"text\"\r\n//                                 multiline\r\n//                                 rows=\"4\"\r\n//                                 placeholder=\"Hello there\"\r\n//                                 error={errors.body ? true : false}\r\n//                                 helperText={errors.body}\r\n//                                 className={classes.textField}\r\n//                                 onChange={this.handleChange}\r\n//                                 fullWidth\r\n//                             />\r\n//                             <br/><br/>\r\n//                             <Button\r\n//                                 type=\"submit\"\r\n//                                 variant=\"contained\"\r\n//                                 color=\"primary\"\r\n//                                 className={classes.submitButton} disabled={loading}\r\n//                             >\r\n//                                 Submit\r\n//                                 {loading && (\r\n//                                     <CircularProgress size={30} className={classes.progressSpinner}/>\r\n//                                 )}\r\n//                             </Button>\r\n//                         </form>\r\n//                     </DialogContent>\r\n//                 </Dialog>\r\n//             </>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// feedback.propTypes = {\r\n//     postAction: PropTypes.func.isRequired,\r\n//     UI: PropTypes.object.isRequired\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     UI: state.UI\r\n// })\r\n\r\n// export default connect(mapStateToProps,{ postAction })(withStyles(styles)(feedback))"]},"metadata":{},"sourceType":"module"}