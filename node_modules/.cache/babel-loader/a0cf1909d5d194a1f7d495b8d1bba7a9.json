{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael Tho\\\\Documents\\\\GitHub\\\\Frontend492\\\\src\\\\components\\\\feedback.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; //material ui components\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress'; //redux\n\nimport { connect } from 'react-redux';\nimport { feedbackAction } from '../redux/actions/dataActions'; //material ui icons\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nclass feedback extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.feedbackAction({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    ;\n\n    if (!nextProps.UI.errors) {\n      this.setState({\n        body: ''\n      });\n      this.handleClose();\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      UI: {\n        loading\n      }\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.handleOpen,\n      tip: \"Post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, \"Post\")), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      className: \"closeButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"feedbackTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, \"Leave An Opinion Or Anything About Your Experience!\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      multiline: true,\n      rows: \"4\",\n      placeholder: \"Everyday Eyecare Is The Best!\",\n      error: errors.body ? true : false,\n      helperText: errors.body,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: \"submitButton\",\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"Send Feedback\", /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 30,\n      className: \"progressSpinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 37\n      }\n    }))))));\n  }\n\n}\n\nfeedback.propTypes = {\n  feedbackAction: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  feedbackAction\n})(feedback);","map":{"version":3,"sources":["C:/Users/Michael Tho/Documents/GitHub/Frontend492/src/components/feedback.js"],"names":["React","Component","PropTypes","Button","TextField","Dialog","DialogContent","CircularProgress","connect","feedbackAction","CloseIcon","feedback","state","open","body","errors","handleOpen","setState","handleClose","handleChange","event","target","name","value","handleSubmit","preventDefault","props","componentWillReceiveProps","nextProps","UI","loading","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//material ui components\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { feedbackAction } from '../redux/actions/dataActions';\r\n\r\n//material ui icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nclass feedback extends Component{\r\n    state = {\r\n        open:false,\r\n        body: '',\r\n        errors: {}\r\n    };\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.UI.errors && !nextProps.UI.loading){\r\n            this.setState({\r\n                errors: nextProps.UI.errors\r\n            });\r\n        };\r\n        if(!nextProps.UI.errors){\r\n            this.setState({ body: '' });\r\n            this.handleClose();\r\n        }\r\n    };\r\n    handleOpen = () => {\r\n        this.setState({ open: true })\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ open: false, errors:{} })\r\n    };\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.feedbackAction({ body: this.state.body })\r\n    }\r\n    render(){\r\n        const { errors } = this.state;\r\n        const {\r\n            UI: { loading }\r\n        } = this.props;\r\n        return (\r\n            <>\r\n                <Button color=\"secondary\" onClick={this.handleOpen} tip='Post'>\r\n                    <h4>Post</h4>\r\n                </Button>\r\n                <Dialog\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                    fullWidth maxWidth=\"sm\"\r\n                >\r\n                    <Button\r\n                        tip=\"Close\"\r\n                        onClick={this.handleClose}\r\n                        className=\"closeButton\"\r\n                    >\r\n                        <CloseIcon/>\r\n                    </Button>\r\n                    <h3 className=\"feedbackTitle\">Leave An Opinion Or Anything About Your Experience!</h3>\r\n                    <DialogContent>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <TextField\r\n                                name=\"body\"\r\n                                type=\"text\"\r\n                                multiline\r\n                                rows=\"4\"\r\n                                placeholder=\"Everyday Eyecare Is The Best!\"\r\n                                error={errors.body ? true : false}\r\n                                helperText={errors.body}\r\n                                onChange={this.handleChange}\r\n                                fullWidth\r\n                            />\r\n                            <br/><br/>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className=\"submitButton\"\r\n                                disabled={loading}\r\n                            >\r\n                                Send Feedback\r\n                                {(\r\n                                    <CircularProgress size={30} className=\"progressSpinner\"/>\r\n                                )}\r\n                            </Button>\r\n                        </form>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfeedback.propTypes = {\r\n    feedbackAction: PropTypes.func.isRequired,\r\n    UI: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    UI: state.UI\r\n})\r\n\r\nexport default connect(mapStateToProps,{feedbackAction})(feedback)"]},"metadata":{},"sourceType":"module"}