{"ast":null,"code":"import { SET_POSTS, LOADING_DATA, LIKE_POST, UNLIKE_POST, DELETE_POST, SET_ERRORS, CLEAR_ERRORS, POSTING, LOADING_UI } from '../types';\nimport axios from 'axios'; //get all posts\n\nexport const getPosts = () => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/posts').then(result => {\n    dispatch({\n      type: SET_POSTS,\n      payload: result.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_POSTS,\n      payload: null\n    });\n  });\n}; //posting\n\nexport const postAction = newPost => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/post', newPost).then(result => {\n    dispatch({\n      type: POSTING,\n      payload: result.data\n    });\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  }).catch(error => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  });\n}; //like a post\n\nexport const likePost = postId => dispatch => {\n  axios.get(`/post/${postId}/like`).then(result => {\n    dispatch({\n      type: LIKE_POST,\n      payload: result.data\n    });\n  }).catch(err => console.log(err));\n}; //unlike a post\n\nexport const unlikePost = postId => dispatch => {\n  axios.get(`/post/${postId}/unlike`).then(result => {\n    dispatch({\n      type: UNLIKE_POST,\n      payload: result.data\n    });\n  }).catch(err => console.log(err));\n}; //delete a post\n\nexport const deletePost = postId => dispatch => {\n  axios.delete(`/post/${postId}`).then(() => {\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n  }).catch(error => console.log(error));\n};","map":{"version":3,"sources":["C:/Users/Michael Tho/Documents/GitHub/Frontend492/src/redux/actions/dataActions.js"],"names":["SET_POSTS","LOADING_DATA","LIKE_POST","UNLIKE_POST","DELETE_POST","SET_ERRORS","CLEAR_ERRORS","POSTING","LOADING_UI","axios","getPosts","dispatch","type","get","then","result","payload","data","catch","err","postAction","newPost","post","error","response","likePost","postId","console","log","unlikePost","deletePost","delete"],"mappings":"AAAA,SAASA,SAAT,EAAmBC,YAAnB,EAAgCC,SAAhC,EAA0CC,WAA1C,EAAsDC,WAAtD,EAAkEC,UAAlE,EAA6EC,YAA7E,EAA0FC,OAA1F,EAAkGC,UAAlG,QAAoH,UAApH;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAD,IAAc;AACxCA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACAQ,EAAAA,KAAK,CAACI,GAAN,CAAU,QAAV,EACCC,IADD,CACOC,MAAD,IAAY;AACdJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,SADD;AAELgB,MAAAA,OAAO,EAAED,MAAM,CAACE;AAFX,KAAD,CAAR;AAIH,GAND,EAOCC,KAPD,CAOQC,GAAD,IAAS;AACZR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,SADD;AAELgB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAZD;AAaH,CAfM,C,CAiBP;;AACA,OAAO,MAAMI,UAAU,GAAIC,OAAD,IAAa;AACnCV,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAD,CAAR;AACAC,EAAAA,KAAK,CAACa,IAAN,CAAW,OAAX,EAAmBD,OAAnB,EACKP,IADL,CACWC,MAAD,IAAY;AACdJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,OADD;AAELS,MAAAA,OAAO,EAAED,MAAM,CAACE;AAFX,KAAD,CAAR;AAIAN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN;AADD,KAAD,CAAR;AAGH,GATL,EAUKY,KAVL,CAUYK,KAAD,IAAW;AACdZ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP,UADD;AAELW,MAAAA,OAAO,EAAEO,KAAK,CAACC,QAAN,CAAeP;AAFnB,KAAD,CAAR;AAIH,GAfL;AAgBH,CAlBM,C,CAoBP;;AACA,OAAO,MAAMQ,QAAQ,GAAIC,MAAD,IAAaf,QAAD,IAAc;AAC9CF,EAAAA,KAAK,CAACI,GAAN,CAAW,SAAQa,MAAO,OAA1B,EACCZ,IADD,CACOC,MAAD,IAAY;AACdJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,SADD;AAELc,MAAAA,OAAO,EAAED,MAAM,CAACE;AAFX,KAAD,CAAR;AAIH,GAND,EAOCC,KAPD,CAOQC,GAAD,IAASQ,OAAO,CAACC,GAAR,CAAYT,GAAZ,CAPhB;AAQH,CATM,C,CAWP;;AACA,OAAO,MAAMU,UAAU,GAAIH,MAAD,IAAaf,QAAD,IAAc;AAChDF,EAAAA,KAAK,CAACI,GAAN,CAAW,SAAQa,MAAO,SAA1B,EACCZ,IADD,CACOC,MAAD,IAAY;AACdJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,WADD;AAELa,MAAAA,OAAO,EAAED,MAAM,CAACE;AAFX,KAAD,CAAR;AAIH,GAND,EAOCC,KAPD,CAOQC,GAAD,IAASQ,OAAO,CAACC,GAAR,CAAYT,GAAZ,CAPhB;AAQH,CATM,C,CAWP;;AACA,OAAO,MAAMW,UAAU,GAAIJ,MAAD,IAAaf,QAAD,IAAc;AAChDF,EAAAA,KAAK,CAACsB,MAAN,CAAc,SAAQL,MAAO,EAA7B,EACKZ,IADL,CACU,MAAM;AACRH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,WAAR;AAAqBY,MAAAA,OAAO,EAAEU;AAA9B,KAAD,CAAR;AACH,GAHL,EAIKR,KAJL,CAIYK,KAAD,IAAWI,OAAO,CAACC,GAAR,CAAYL,KAAZ,CAJtB;AAKH,CANM","sourcesContent":["import { SET_POSTS,LOADING_DATA,LIKE_POST,UNLIKE_POST,DELETE_POST,SET_ERRORS,CLEAR_ERRORS,POSTING,LOADING_UI } from '../types';\r\nimport axios from 'axios';\r\n\r\n//get all posts\r\nexport const getPosts = () => (dispatch) => {\r\n    dispatch({ type: LOADING_DATA });\r\n    axios.get('/posts')\r\n    .then((result) => {\r\n        dispatch({\r\n            type: SET_POSTS,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: SET_POSTS,\r\n            payload: null\r\n        })\r\n    })\r\n}\r\n\r\n//posting\r\nexport const postAction = (newPost) => {\r\n    dispatch({ type: LOADING_UI});\r\n    axios.post('/post',newPost)\r\n        .then((result) => {\r\n            dispatch({\r\n                type: POSTING,\r\n                payload: result.data\r\n            });\r\n            dispatch({\r\n                type: CLEAR_ERRORS\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            dispatch({\r\n                type: SET_ERRORS,\r\n                payload: error.response.data\r\n            })\r\n        })\r\n}\r\n\r\n//like a post\r\nexport const likePost = (postId) => (dispatch) => {\r\n    axios.get(`/post/${postId}/like`)\r\n    .then((result) => {\r\n        dispatch({\r\n            type: LIKE_POST,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\n//unlike a post\r\nexport const unlikePost = (postId) => (dispatch) => {\r\n    axios.get(`/post/${postId}/unlike`)\r\n    .then((result) => {\r\n        dispatch({\r\n            type: UNLIKE_POST,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\n//delete a post\r\nexport const deletePost = (postId) => (dispatch) => {\r\n    axios.delete(`/post/${postId}`)\r\n        .then(() => {\r\n            dispatch({ type: DELETE_POST, payload: postId})\r\n        })\r\n        .catch((error) => console.log(error))\r\n}"]},"metadata":{},"sourceType":"module"}